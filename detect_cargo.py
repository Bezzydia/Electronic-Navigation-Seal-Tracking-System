# -*- coding: utf-8 -*-
"""Detect_cargo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gV1Ht-FB2fHo7xWdE0AhD5RmV4O95iTi
"""

pip install aiogram

import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ (—Ñ–∞–π–ª —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
conn = sqlite3.connect('cargo.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
CREATE TABLE IF NOT EXISTS cargos (
    grz TEXT PRIMARY KEY,  -- –ù–æ–º–µ—Ä –ì–†–ó (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
    status TEXT,           -- –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞
    route TEXT              -- –ú–∞—Ä—à—Ä—É—Ç (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)
)
''')

conn.commit()
conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def add_cargo(grz, status, route):
    conn = sqlite3.connect('cargo.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO cargos (grz, status, route)
    VALUES (?, ?, ?)
    ''', (grz, status, route))
    conn.commit()
    conn.close()

# –ü—Ä–∏–º–µ—Ä
add_cargo("A123BC", "–í –ø—É—Ç–∏", "https://maps.example.com/route1")
add_cargo("B456DE", "–ó–∞–¥–µ—Ä–∂–∞–Ω", "https://maps.example.com/route2")

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–∑—ã
def get_all_cargos():
    conn = sqlite3.connect('cargo.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM cargos")
    result = cursor.fetchall()
    conn.close()
    return result

# –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏
print("–í—Å–µ –≥—Ä—É–∑—ã:", get_all_cargos())

import sqlite3
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect('cargo.db', check_same_thread=False)
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
cursor.execute("PRAGMA table_info(cargos)")
columns = [col[1] for col in cursor.fetchall()]

# –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if 'latitude' not in columns:
    cursor.execute("ALTER TABLE cargos ADD COLUMN latitude REAL")
    cursor.execute("ALTER TABLE cargos ADD COLUMN longitude REAL")
    cursor.execute("ALTER TABLE cargos ADD COLUMN last_update TIMESTAMP")
    conn.commit()
    print("–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ latitude, longitude, last_update")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''
CREATE TABLE IF NOT EXISTS cargos (
    grz TEXT PRIMARY KEY,
    status TEXT,
    route TEXT,
    latitude REAL,
    longitude REAL,
    last_update TIMESTAMP
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS status_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    grz TEXT,
    status TEXT,
    timestamp TIMESTAMP,
    FOREIGN KEY(grz) REFERENCES cargos(grz)
)
''')

conn.commit()

def add_cargo(grz: str, status: str, route: str, latitude: float, longitude: float):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞"""
    try:
        with conn:
            conn.execute('''
            INSERT INTO cargos (grz, status, route, latitude, longitude, last_update)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (grz, status, route, latitude, longitude, datetime.now()))

            # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
            conn.execute('''
            INSERT INTO status_history (grz, status, timestamp)
            VALUES (?, ?, ?)
            ''', (grz, status, datetime.now()))
    except sqlite3.IntegrityError:
        print(f"–ì—Ä—É–∑ —Å –ì–†–ó {grz} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
add_cargo(
    grz="A123BC",
    status="–í –ø—É—Ç–∏",
    route="–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    latitude=55.7558,
    longitude=37.6173
)

add_cargo(
    grz="B456DE",
    status="–ó–∞–¥–µ—Ä–∂–∞–Ω",
    route="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    latitude=55.0083,
    longitude=82.9357
)

conn.close()

import sqlite3
from datetime import datetime
from typing import Optional

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
conn = sqlite3.connect('cargo.db', check_same_thread=False)
cursor = conn.cursor()

def initialize_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    cursor.execute("PRAGMA table_info(cargos)")
    existing_columns = [col[1] for col in cursor.fetchall()]

    required_columns = ['grz', 'status', 'route', 'latitude', 'longitude', 'last_update']

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    for column in required_columns:
        if column not in existing_columns:
            if column == 'last_update':
                cursor.execute("ALTER TABLE cargos ADD COLUMN last_update TIMESTAMP")
            else:
                cursor.execute(f"ALTER TABLE cargos ADD COLUMN {column} TEXT")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cargos (
        grz TEXT PRIMARY KEY,
        status TEXT,
        route TEXT,
        latitude REAL,
        longitude REAL,
        last_update TIMESTAMP
    )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS status_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        grz TEXT,
        status TEXT,
        timestamp TIMESTAMP,
        FOREIGN KEY(grz) REFERENCES cargos(grz)
    )
    ''')

    conn.commit()

def add_or_update_cargo(
    grz: str,
    status: str,
    route: str,
    latitude: Optional[float] = None,
    longitude: Optional[float] = None
) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ"""
    existing_cargo = cursor.execute(
        "SELECT grz FROM cargos WHERE grz = ?", (grz,)
    ).fetchone()

    current_time = datetime.now()

    if existing_cargo:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
        UPDATE cargos
        SET status = ?, route = ?, latitude = ?, longitude = ?, last_update = ?
        WHERE grz = ?
        ''', (status, route, latitude, longitude, current_time, grz))

        print(f"–ì—Ä—É–∑ {grz} –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
        INSERT INTO cargos
        (grz, status, route, latitude, longitude, last_update)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (grz, status, route, latitude, longitude, current_time))

        print(f"–ì—Ä—É–∑ {grz} –¥–æ–±–∞–≤–ª–µ–Ω")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–∞
    cursor.execute('''
    INSERT INTO status_history (grz, status, timestamp)
    VALUES (?, ?, ?)
    ''', (grz, status, current_time))

    conn.commit()

def get_cargo_info(grz: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ"""
    cursor.execute("SELECT * FROM cargos WHERE grz = ?", (grz,))
    result = cursor.fetchone()

    if result:
        return {
            'grz': result[0],
            'status': result[1],
            'route': result[2],
            'latitude': result[3],
            'longitude': result[4],
            'last_update': result[5]
        }
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
initialize_db()

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
try:
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–∑—ã
    add_or_update_cargo(
        grz="A123BC",
        status="–í –ø—É—Ç–∏",
        route="–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        latitude=55.7558,
        longitude=37.6173
    )

    add_or_update_cargo(
        grz="B456DE",
        status="–ó–∞–¥–µ—Ä–∂–∞–Ω",
        route="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
        latitude=55.0083,
        longitude=82.9357
    )

except sqlite3.IntegrityError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π: {e}")

finally:
    conn.close()

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sqlite3
import nest_asyncio
from datetime import datetime
import requests
from aiogram.types.input_file import BufferedInputFile

nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="8032532648:AAEeFai3NCWhQHj0VvvnV8lcvvyoYMWovFo")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('cargo.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FindCargo(StatesGroup):
    choosing_grz = State()

class StatusUpdate(StatesGroup):
    choosing_grz = State()
    choosing_action = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å GRZ
def get_grz_keyboard():
    cursor.execute("SELECT grz FROM cargos")
    grz_list = [row[0] for row in cursor.fetchall()]

    keyboard = []
    row = []
    for grz in grz_list:
        row.append(InlineKeyboardButton(text=grz, callback_data=f"grz:{grz}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞: /find\n"
        "‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /status"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find
@dp.message(Command("find"))
async def find_cargo_start(message: Message, state: FSMContext):
    await state.clear()
    keyboard = get_grz_keyboard()

    if not keyboard.inline_keyboard:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    await state.set_state(FindCargo.choosing_grz)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ GRZ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.callback_query(StateFilter(FindCargo.choosing_grz), F.data.startswith("grz:"))
async def show_cargo_info(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    grz = callback.data.split(":")[1]

    cursor.execute("SELECT * FROM cargos WHERE grz = ?", (grz,))
    cargo = cursor.fetchone()

    if not cargo:
        await callback.message.answer("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        return

    if cargo[3] and cargo[4]:
        map_url = (
            f"https://static-maps.yandex.ru/1.x/"
            f"?ll={cargo[4]},{cargo[3]}"
            f"&size=600,300"
            f"&z=10"
            f"&l=map"
            f"&pt={cargo[4]},{cargo[3]},pm2rdm"
        )

        try:
            response = requests.get(map_url, timeout=10)
            response.raise_for_status()
            photo = BufferedInputFile(response.content, filename=f"map_{grz}.png")

            await callback.message.answer_photo(
                photo=photo,
                caption=(
                    f"üöö –ì—Ä—É–∑ {cargo[0]}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {cargo[1]}\n"
                    f"üó∫ –ú–∞—Ä—à—Ä—É—Ç: {cargo[2]}\n"
                    f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {cargo[5]}"
                )
            )
        except requests.exceptions.RequestException:
            await callback.message.answer(
                f"–≥—Ä—É–∑ {cargo[0]}\n"
                f"–°—Ç–∞—Ç—É—Å: {cargo[1]}\n"
                f"–ú–∞—Ä—à—Ä—É—Ç: {cargo[2]}\n"
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É"
            )
    else:
        await callback.message.answer(
            f"–≥—Ä—É–∑ {cargo[0]}\n"
            f"–°—Ç–∞—Ç—É—Å: {cargo[1]}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {cargo[2]}\n"
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã"
        )

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.message(Command("status"))
async def change_status_start(message: Message, state: FSMContext):
    await state.clear()
    keyboard = get_grz_keyboard()

    if not keyboard.inline_keyboard:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)
    await state.set_state(StatusUpdate.choosing_grz)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ GRZ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(StateFilter(StatusUpdate.choosing_grz), F.data.startswith("grz:"))
async def choose_status_action(callback: CallbackQuery, state: FSMContext):
    grz = callback.data.split(":")[1]
    await state.update_data(selected_grz=grz)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≠–ù–ü", callback_data="status:activate")],
        [InlineKeyboardButton(text="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≠–ù–ü", callback_data="status:deactivate")]
    ])

    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –≥—Ä—É–∑: {grz}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    await state.set_state(StatusUpdate.choosing_action)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(StateFilter(StatusUpdate.choosing_action), F.data.startswith("status:"))
async def update_status(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    new_status = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ" if action == "activate" else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ùå"

    data = await state.get_data()
    grz = data.get("selected_grz")

    if not grz:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–∞")
        return

    cursor.execute('''
        UPDATE cargos
        SET status = ?, last_update = ?
        WHERE grz = ?
    ''', (new_status, datetime.now(), grz))

    cursor.execute('''
        INSERT INTO status_history (grz, status, timestamp)
        VALUES (?, ?, ?)
    ''', (grz, new_status, datetime.now()))

    conn.commit()

    await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ {grz} –∏–∑–º–µ–Ω–µ–Ω: {new_status}")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())